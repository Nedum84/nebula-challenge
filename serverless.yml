service: nebula-logix-api
useDotenv: false # Load environment variables from .env files (default: false)
configValidationMode: off # error | warn(default) | off

custom:
  awsId: '893130088846'
  stage: ${opt:stage, 'dev'}
  awsRegion: ${opt:region, 'eu-north-1'}
  bucketName: storage-${self:service}-${self:custom.stage}-${self:custom.awsId}
  role: arn:aws:iam::${self:custom.awsId}:role/CustomLambdaRole

  esbuild:
    bundle: true
    minify: false
    keepOutputDirectory: false
    external:
      - 'mock-aws-s3'
      - 'pg-hstore'
      - 'pg'
      - 'sequelize-cli'
      - 'nock'
      - 'sharp'
      - '@mapbox/node-pre-gyp'
      - 'bcrypt'
    exclude:
      - 'aws-sdk'
  
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
    websocketPort: 3001
    noPrependStageInUrl: true
    noAuth: true

provider:
  name: aws
  runtime: nodejs18.x # fix RSA PADDING error before upgrading to 18.x (TypeError: RSA_PKCS1_PADDING is no longer supported for private decryption, this can be reverted with --security-revert=CVE-2023-46809). more here: https://eu-west-2.console.aws.amazon.com/cloudwatch/home?region=eu-west-2#logsV2:log-groups/log-group/$252Faws$252Flambda$252Fnebula-dev-api
  memorySize: 128
  timeout: 30
  httpApi:
    payload: "2.0" # Ensure HTTP API uses v2
    cors: false
  # minimumCompressionSize: 0 # Ensure streaming is not compressed
  apiGateway:
    binaryMediaTypes:
      - "image/png"
      - "image/jpeg"
      - "multipart/form-data"
      - "*/*"
  stage: ${self:custom.stage}
  region: ${self:custom.awsRegion}
  lambdaHashingVersion: "20201221"
  tags:
    service: nebula
    company: Nebula Logix Ltd.
    project: backendApp
  tracing:
    apiGateway: true
    lambda: true
  logs:
    restApi:
      level: ERROR
  deploymentBucket:
    name: deploys.${self:custom.awsId}.${self:custom.awsRegion}
    serverSideEncryption: AES256
    versioning: false
  iam:
    role: ${self:custom.role}
  environment:
    AWS_S3_BUCKET_NAME: !Ref S3BucketAssets
    SERVICE_LAMBDA_ROLE: ${self:custom.role}
    EVENT_SCHEDULAR_GROUP_NAME: !Ref NebulaSchedulerEventGroup
    SNS_TOPIC_NAME: !GetAtt NebulaSnsTopic.TopicName
    SNS_TOPIC_ARN: !Ref NebulaSnsTopic
    SQS_QUEUE_URL: !GetAtt NebulaSqsQueue.QueueUrl
    SQS_QUEUE_ARN: !GetAtt NebulaSqsQueue.Arn

plugins:
  - serverless-offline
  - serverless-deployment-bucket
  - serverless-esbuild # enables esbuild plugin (https://dev.to/slootjes/optimizing-typescript-packages-in-serverless-framework-with-esbuild-1ol4)

package:
  exclude:
    - "node_modules/aws-sdk/**"
    - "**/*.map"
    - "test/**"
    - "**/*.test.*"

functions:
  api:
    handler: src/aws/lambda-handler.handler
    timeout: 28 # 30 seconds
    memorySize: 256
    dependsOn:
      - S3BucketAssets
    events:
      - http:
          path: /v1
          method: ANY
          cors: false
      - http:
          path: /v1/{proxy+}
          method: ANY
          cors: false

    url:
      invokeMode: BUFFERED # RESPONSE_STREAM, BUFFERED
      cors:
        allowedOrigins:
          - "*"
        allowedHeaders:
          - "Origin"
          - "Accept"
          - "X-Requested-With"
          - "Authorization"
          - "Content-Type"
          - "w-frsc"
          - "-w-x-api-source"
          - "device-info"
        allowedMethods:
          - "*"
        allowCredentials: true
        exposedResponseHeaders:
          - "*"
        maxAge: 6000 # In seconds

  # This is invoked with lambda streaming
  streamApp:
    handler: src/aws/lambda-handler.functionUrlStreamHandler
    timeout: 300 # 5 mins
    memorySize: 512
    url:
      invokeMode: RESPONSE_STREAM # RESPONSE_STREAM, BUFFERED
      cors:
        allowedOrigins:
          - "*"
          # - https://url1.com
          # - https://url2.com
        allowedHeaders:
          - "Origin"
          - "Accept"
          - "X-Requested-With"
          - "Authorization"
          - "Content-Type"
          - "w-frsc"
          - "-w-x-api-source"
          - "device-info"
        allowedMethods:
          - "*"
        allowCredentials: true
        exposedResponseHeaders:
          - "*"
        maxAge: 6000 # In seconds

  job: # long running process (separate fn because api gateway auto limits 'api' fn to 30s)
    handler: src/aws/lambda-handler.handler
    timeout: 300 # 5 minutes
    memorySize: 1024 # OR 1536, 1024, 512
    dependsOn:
      - S3BucketAssets
      - NebulaSnsTopic
      - NebulaSqsQueue
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          existing: true
          event: s3:ObjectCreated:*
          rules:
            - prefix: image/ # Cannot specify more than one prefix rule in a filter
            # - suffix: .jpg
      - s3:
          bucket: ${self:custom.bucketName}
          existing: true
          event: s3:ObjectRemoved:*
      - sns:
          arn: !Ref NebulaSnsTopic #!ImportValue ${self:custom.stage}-nebulaSnsTopicArn
          topicName: ${self:custom.stage}-nebulaSnsTopicName # `!ImportValue ${self:custom.stage}-nebulaSnsTopicName` not working(don't know why)
      - sqs:
          arn: !GetAtt NebulaSqsQueue.Arn #!ImportValue ${self:custom.stage}-nebulaSqsQueueArn
      - schedule:
          rate: rate(2 hours)
          input:
            fn: cmd:reset_client_cache
      - schedule:
          # rate: rate(1 hour)
          rate: cron(0 0-23 * * ? *)
          input:
            fn: cmd:study_reminder_notification

resources:
  Resources:
    S3BucketAssets: #Can be any name
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        ### No more AccessControl
        # AccessControl: PublicRead # (ACL) ==> PublicRead OR Private
        ###  replace it with...
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter # (ObjectWriter OR BucketOwnerEnforced)
        VersioningConfiguration:
          Status: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - "*"
    # Event Scheduler
    NebulaSchedulerEventGroup:
      Type: AWS::Scheduler::ScheduleGroup
      Properties:
        Name: ${self:custom.stage}-nebulaSchedularGroup
    # SNS
    NebulaSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        KmsMasterKeyId: alias/aws/sns
        DisplayName: Nebula SNS Topic
        TopicName: ${self:custom.stage}-nebulaSnsTopic
    # SQS Queues
    NebulaSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        KmsMasterKeyId: alias/aws/sqs
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt NebulaSqsDeadLetterQueue.Arn
          maxReceiveCount: 3
        VisibilityTimeout: 300 # 5 minutes
    NebulaSqsDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        KmsMasterKeyId: alias/aws/sqs

